{"version":3,"sources":["components/ConsolaSemantica.js","helpers/getIdentifier.js","components/Form.js","pages/index.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontWeight","fontSize","text","paddingLeft","container","paddingTop","display","inputText","width","color","ConsolaSemantica","codigo","classes","Box","justifyContent","alignItems","style","TextField","id","className","multiline","rows","disabled","defaultValue","verificarVariable","name","variables","isCorrect","Object","keys","forEach","value","getIdentifier","code","getCodeCad","Ident","Nums","Oper1","regxIsOpe","regxInt","regxBool","regxString","identificador","numero","getCode","match","textErrors","int","string","bool","codeI","length","getValueText","tempArray","codeF","getChar","charAt","i","cont","includes","operacionName","hasOwnProperty","Form","setData","useState","setCodigo","label","onChange","target","marginTop","Button","variant","onClick","AnalizadorSintactico","data","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c335e135.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: 700,\n    color: 'red',\n  },\n}));\n\nconst ConsolaSemantica = ({ codigo }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <div style={{ paddingTop: 100 }}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              multiline\n              rows={10}\n              disabled={true}\n              defaultValue={codigo}\n            />\n          </div>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default ConsolaSemantica;\n","const getIdentifier = (code) => {\n  if (!code) {\n    return '';\n  }\n  let getCodeCad = [];\n  let Ident = /[a-zA-Z_]\\w*/g;\n  let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n  let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n\n  const regxIsOpe =\n    /^[a-zA-Z]+ = ([a-zA-Z]+|[0-9]+) (-|\\+|\\/|\\*) ([a-zA-Z]+|[0-9]+)/g;\n\n  const regxInt = /[0-9]+/g;\n  const regxBool = /(true|false)/g;\n  const regxString = /[a-zA-Z]+/g;\n\n  let identificador = '';\n  let numero = '';\n  const getCode = code.match(/[^\\r\\n]+/g);\n  let textErrors = '';\n\n  const variables = {\n    int: {},\n    string: {},\n    bool: {},\n  };\n\n  // Separar en token cada linea de codigo\n  for (let codeI = 0; codeI < getCode.length; codeI++) {\n    let getValueText = getCode[codeI];\n    let tempArray = [];\n\n    for (let codeF = 0; codeF < getValueText.length; codeF++) {\n      let getChar = getValueText.charAt(codeF);\n\n      if (getChar.match(Ident)) {\n        identificador = identificador + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Ident)) {\n          tempArray = [...tempArray, identificador];\n          identificador = '';\n        }\n      } else if (getChar.match(Oper1)) {\n        tempArray = [...tempArray, getChar];\n      } else if (getChar.match(Nums)) {\n        numero = numero + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Nums)) {\n          tempArray = [...tempArray, numero];\n          numero = '';\n        }\n      }\n    }\n    getCodeCad = [...getCodeCad, tempArray];\n  }\n\n  for (let i = 0; i < getCodeCad.length; i++) {\n    const cont = i + 1;\n    if (\n      getCodeCad[i].includes('const') ||\n      getCodeCad[i].includes('let') ||\n      getCodeCad[i].includes('var')\n    ) {\n      if (getCodeCad[i].length === 5) {\n        if (getCodeCad[i][3].match(regxInt)) {\n          variables['int'] = {\n            ...variables['int'],\n            [getCodeCad[i][1]]: getCodeCad[i][3],\n          };\n        }\n        if (\n          getCodeCad[i][3].match(regxString) &&\n          getCodeCad[i][3] !== 'true' &&\n          getCodeCad[i][3] !== 'false'\n        ) {\n          variables['string'] = {\n            ...variables['string'],\n            [getCodeCad[i][1]]: getCodeCad[i][3],\n          };\n        }\n        if (getCodeCad[i][3].match(regxBool)) {\n          variables['bool'] = {\n            ...variables['bool'],\n            [getCodeCad[i][1]]: getCodeCad[i][3],\n          };\n        }\n      }\n    }\n    if (getCode[i].match(regxIsOpe)) {\n      let operacionName = '';\n      switch (getCodeCad[i][3]) {\n        case '+':\n          operacionName = 'sumar';\n          break;\n        case '-':\n          operacionName = 'restar';\n          break;\n        case '*':\n          operacionName = 'multiplicar';\n          break;\n        case '/':\n          operacionName = 'dividir';\n          break;\n        default:\n          operacionName = '';\n      }\n\n      // OPERACIONES\n\n      if (['+', '-', '*', '/'].includes(getCodeCad[i][3])) {\n        if (\n          getCodeCad[i][2].match(regxInt) &&\n          getCodeCad[i][4].match(regxInt)\n        ) {\n        } else if (getCodeCad[i][2].match(regxInt)) {\n          if (!variables['int'].hasOwnProperty([getCodeCad[i][4]])) {\n            if (!verificarVariable(getCodeCad[i][4], variables)) {\n              textErrors += `Error linea ${cont}, La variable ${getCodeCad[i][4]} no esta declarada.\\n`;\n            }\n            textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n          }\n        } else if (getCodeCad[i][4].match(regxInt)) {\n          if (!variables['int'].hasOwnProperty([getCodeCad[i][2]])) {\n            if (!verificarVariable(getCodeCad[i][2], variables)) {\n              textErrors += `Error linea ${cont}, La variable ${getCodeCad[i][2]} no esta declarada.\\n`;\n            }\n            textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n          }\n        } else {\n          if (\n            verificarVariable(getCodeCad[i][2], variables) &&\n            verificarVariable(getCodeCad[i][4], variables)\n          ) {\n            if (\n              variables['string'].hasOwnProperty([getCodeCad[i][2]]) &&\n              variables['string'].hasOwnProperty([getCodeCad[i][4]]) &&\n              getCodeCad[i][3] !== '+'\n            ) {\n              textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\", ambos son String.\\n`;\n            } else if (\n              !variables['int'].hasOwnProperty([getCodeCad[i][2]]) ||\n              !variables['int'].hasOwnProperty([getCodeCad[i][4]])\n            ) {\n              textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n            }\n          }\n\n          if (!verificarVariable(getCodeCad[i][2], variables)) {\n            textErrors += `Error linea ${cont}, La variable \"${getCodeCad[i][4]}\" no esta declarada.\\n`;\n          }\n          if (!verificarVariable(getCodeCad[i][4], variables)) {\n            textErrors += `Error linea ${cont}, La variable \"${getCodeCad[i][4]}\" no esta declarada.\\n`;\n          }\n        }\n      }\n    }\n  }\n\n  return textErrors;\n};\n\nconst verificarVariable = (name, variables) => {\n  let isCorrect = false;\n\n  Object.keys(variables).forEach((value) => {\n    if (variables[value][name]) {\n      isCorrect = true;\n    }\n  });\n\n  return isCorrect;\n};\n\nexport default getIdentifier;\n","import React, { useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport getIdentifier from '../helpers/getIdentifier';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: 700,\n  },\n}));\n\nconst Form = ({ setData }) => {\n  const classes = useStyles();\n  const [codigo, setCodigo] = useState('');\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h1>ANALIZADOR SEMÁNTICO</h1>\n          <div className={classes.container}>\n            <span className={classes.title}>Autor:</span>\n            <span className={classes.text}>\n              Jose Enmanuel Estrella 2-16-0823\n            </span>\n          </div>\n          <div className={classes.container}>\n            <span className={classes.title}>Lenguaje:</span>\n            <span className={classes.text}>JavaScript</span>\n          </div>\n        </div>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <div style={{ paddingTop: 100 }}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              label=\"Escribe o pega el código a analizar\"\n              multiline\n              rows={10}\n              defaultValue={codigo}\n              onChange={({ target: { value } }) => setCodigo(value)}\n            />\n          </div>\n          <div style={{ marginTop: 10 }}>\n            <Button\n              variant=\"contained\"\n              onClick={() => setData(getIdentifier(codigo))}\n            >\n              Analizar\n            </Button>\n          </div>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default Form;\n","import React, { useState } from 'react';\nimport ConsolaSemantica from '../components/ConsolaSemantica';\nimport Form from '../components/Form';\n\nconst AnalizadorSintactico = () => {\n  const [data, setData] = useState('');\n\n  return (\n    <>\n    {console.log(data)}\n      <Form setData={setData} />\n      <ConsolaSemantica codigo={data} />\n    </>\n  );\n};\n\nexport default AnalizadorSintactico;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AnalizadorSintactico from './pages';\n\nReactDOM.render(\n    <AnalizadorSintactico />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}