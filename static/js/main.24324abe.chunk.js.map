{"version":3,"sources":["components/ConsolaSintactica.js","helpers/getIdentifier.js","components/Form.js","pages/index.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontWeight","fontSize","text","paddingLeft","container","paddingTop","display","inputText","width","color","ConsolaSintactica","codigo","classes","Box","justifyContent","alignItems","style","TextField","id","className","multiline","rows","disabled","defaultValue","getIdentifier","code","getCodeCad","Ident","Nums","Oper1","regxConst","regxLetOrVar","regxFunction","regxIf","regxElse","regxConsole","regxWhile","identificador","numero","getCode","match","textErrors","codeI","length","getValueText","tempArray","codeF","getChar","charAt","llavesD","llavesI","i","cont","includes","Form","setData","useState","setCodigo","label","onChange","value","target","marginTop","Button","variant","onClick","AnalizadorSintactico","data","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24324abe.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: 700,\n    color: 'red',\n  },\n}));\n\nconst ConsolaSintactica = ({ codigo }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <div style={{ paddingTop: 100 }}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              multiline\n              rows={10}\n              disabled={true}\n              defaultValue={codigo ? codigo : 'No hay errores.'}\n            />\n          </div>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default ConsolaSintactica;\n","const getIdentifier = (code) => {\n  if (!code) {\n    return '';\n  }\n  let getCodeCad = [];\n  let Ident = /[a-zA-Z_]\\w*/g;\n  let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n  let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n\n  const regxConst = /const ([a-zA-Z]+)( = )([0-9]+)(;)$/g;\n  const regxLetOrVar = /(var|let) ([a-zA-Z]+)(;|(( = )([0-9]+);))$/g;\n  const regxFunction = /function ([a-zA-Z]+ )((\\(\\))|(\\([a-zA-Z]+\\))) {$/g;\n  const regxIf = /if \\(.+\\) {$/g;\n  const regxElse = /else {$/g;\n  const regxConsole = /console.log\\(.\\);$/g;\n  const regxWhile = /while \\(.+\\) {$/g;\n\n  let identificador = '';\n  let numero = '';\n  const getCode = code.match(/[^\\r\\n]+/g);\n  let textErrors = '';\n\n  // Separar en token cada linea de codigo\n  for (let codeI = 0; codeI < getCode.length; codeI++) {\n    let getValueText = getCode[codeI];\n    let tempArray = [];\n\n    for (let codeF = 0; codeF < getValueText.length; codeF++) {\n      let getChar = getValueText.charAt(codeF);\n\n      if (getChar.match(Ident)) {\n        identificador = identificador + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Ident)) {\n          tempArray = [...tempArray, identificador];\n          identificador = '';\n        }\n      } else if (getChar.match(Oper1)) {\n        tempArray = [...tempArray, getChar];\n      } else if (getChar.match(Nums)) {\n        numero = numero + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Nums)) {\n          tempArray = [...tempArray, numero];\n          numero = '';\n        }\n      }\n    }\n    getCodeCad = [...getCodeCad, tempArray];\n  }\n\n  let llavesD = 0;\n  let llavesI = 0;\n\n  for (let i = 0; i < getCodeCad.length; i++) {\n    const cont = i + 1;\n    // Si son variables\n    if (getCodeCad[i].includes('const')) {\n      if (!getCode[i].match(regxConst)) {\n        textErrors += `Error linea ${cont}, solucion: const ${\n          getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n        } = ${getCodeCad[i][3]?.match(Nums) ? getCodeCad[i][3] : 0};\\n`;\n      }\n    }\n    if (getCodeCad[i].includes('let') || getCodeCad[i].includes('var')) {\n      if (!getCode[i].match(regxLetOrVar)) {\n        if (getCodeCad[i].length === 3) {\n          textErrors += `Error linea ${cont}, solucion: ${getCodeCad[i][0]} ${\n            getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n          };\\n`;\n        } else {\n          textErrors += `Error linea ${cont}, solucion: ${getCodeCad[i][0]} ${\n            getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n          } = ${getCodeCad[i][3]?.match(Nums) ? getCodeCad[i][3] : 0};\\n`;\n        }\n      }\n    }\n\n    // Si es una function\n    if (getCodeCad[i].includes('function')) {\n      if (!getCode[i].match(regxFunction)) {\n        textErrors += `Error linea ${cont}, solucion: function ${\n          getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n        } (${getCodeCad[i][3]?.match(Ident) ? getCodeCad[i][3] : 'param'}) {\\n`;\n      }\n    }\n\n    //Si es in if\n    if (getCodeCad[i].includes('if')) {\n      if (!getCode[i].match(regxIf)) {\n        textErrors += `Error linea ${cont}, solucion: if (true) {\\n`;\n      }\n    }\n\n    //Si es in else\n    if (getCodeCad[i].includes('else')) {\n      if (!getCode[i].match(regxElse)) {\n        textErrors += `Error linea ${cont}, solucion: else {\\n`;\n      }\n    }\n\n    // Si es un console.log\n    if (getCodeCad[i].includes('console')) {\n      if (!getCode[i].match(regxConsole)) {\n        textErrors += `Error linea ${cont}, solucion: console.log(value);\\n`;\n      }\n    }\n\n    // Si es un while\n    if (getCodeCad[i].includes('while')) {\n      if (!getCode[i].match(regxWhile)) {\n        textErrors += `Error linea ${cont}, solucion: while (true) {\\n`;\n      }\n    }\n\n    //Cantidad de llaves\n    if (getCodeCad[i].includes('{')) {\n      llavesI += 1;\n    }\n    if (getCodeCad[i].includes('}')) {\n      llavesD += 1;\n    }\n  }\n\n  if (llavesI > llavesD) {\n    textErrors += `Error, faltan ${llavesI - llavesD}  '}'  de cierre.\\n`;\n  } else if (llavesD > llavesI) {\n    textErrors += `Error, faltan ${llavesD - llavesI}  '{'  de cierre.\\n`;\n  }\n\n  return textErrors;\n};\n\nexport default getIdentifier;\n","import React, { useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport getIdentifier from '../helpers/getIdentifier';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: 700,\n  },\n}));\n\nconst Form = ({ setData }) => {\n  const classes = useStyles();\n  const [codigo, setCodigo] = useState('');\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h1>ANALIZADOR SINTÁCTICO</h1>\n          <div className={classes.container}>\n            <span className={classes.title}>Autor:</span>\n            <span className={classes.text}>\n              Jose Enmanuel Estrella 2-16-0823\n            </span>\n          </div>\n          <div className={classes.container}>\n            <span className={classes.title}>Lenguaje:</span>\n            <span className={classes.text}>JavaScript</span>\n          </div>\n        </div>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <div style={{ paddingTop: 100 }}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              label=\"Escribe o pega el código a analizar\"\n              multiline\n              rows={10}\n              defaultValue={codigo}\n              onChange={({ target: { value } }) => setCodigo(value)}\n            />\n          </div>\n          <div style={{ marginTop: 10 }}>\n            <Button\n              variant=\"contained\"\n              onClick={() => setData(getIdentifier(codigo))}\n            >\n              Analizar\n            </Button>\n          </div>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default Form;\n","import React, { useState } from 'react';\nimport ConsolaSintactica from '../components/ConsolaSintactica';\nimport Form from '../components/Form';\n\nconst AnalizadorSintactico = () => {\n  const [data, setData] = useState('');\n\n  return (\n    <>\n    {console.log(data)}\n      <Form setData={setData} />\n      <ConsolaSintactica codigo={data} />\n    </>\n  );\n};\n\nexport default AnalizadorSintactico;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AnalizadorSintactico from './pages';\n\nReactDOM.render(\n    <AnalizadorSintactico />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}