{"version":3,"sources":["components/ConsolaSintactica.js","helpers/getIdentifier.js","helpers/getIdentifierCodigoIntermedio.js","utils/const.js","helpers/getIdentifierLexico.js","components/Form.js","components/ConsolaCodigoIntermedio.js","components/ConsolaLexica.js","components/ConsolaSemantica.js","helpers/getIdentifierSemantico.js","components/FormSemantico.js","pages/index.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontWeight","fontSize","text","paddingLeft","container","paddingTop","display","inputText","width","color","ConsolaSintactica","codigo","classes","Box","justifyContent","alignItems","style","TextField","id","className","multiline","rows","disabled","defaultValue","getIdentifier","code","getCodeCad","Ident","Nums","Oper1","regxConst","regxLetOrVar","regxFunction","regxIf","regxElse","regxConsole","regxWhile","identificador","numero","getCode","match","textErrors","codeI","length","getValueText","tempArray","codeF","getChar","charAt","llavesD","llavesI","i","cont","includes","console","log","getIdentifierCodigoIntermedio","parse","declare","begin","end","static","dynamic","si","sino","print","slice","join","f","hasOwnProperty","typesLexico","name","values","objLex","codeCad","OperM","char","cadNums","ss","splice","inc","map","x","obj","Nombre","Tipo","Token","Palabras","ParentesisIzq","ParentesisDer","LlaveIzq","LlaveDer","corcheteIzq","corcheteDer","OperadoresAri","logicos","comparadores","delimitador","Form","setData","setDataConvert","setDataConvertLexico","useState","setCodigo","textTransform","margin","label","onChange","value","target","marginTop","Button","variant","onClick","convertCode","getIdentifierLexico","ConsolaCodigoIntermedio","ConsolaLexica","TableContainer","component","Paper","sx","maxHeight","Table","minWidth","size","TableHead","backgroundColor","TableRow","TableCell","align","TableBody","border","scope","ConsolaSemantica","verificarVariable","variables","isCorrect","Object","keys","forEach","getIdentifierSemantico","regxIsOpe","regxInt","regxBool","regxString","int","string","bool","operacionName","FormSemantico","setDataConvertSemantica","AnalizadorSintactico","data","dataConvert","dataConvertLexico","dataConvertSemantica","flexGrow","paddingBottom","Grid","spacing","item","xs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4335ceed.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: '100%',\n    color: 'red',\n  },\n}));\n\nconst ConsolaSintactica = ({ codigo }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h4>CONSOLA SINTÁCTICA</h4>\n        </div>\n      </Box>\n        <div>\n          <div style={{ paddingTop: 17}}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              multiline\n              rows={16}\n              disabled={true}\n              defaultValue={codigo}\n            />\n          </div>\n        </div>\n    </>\n  );\n};\n\nexport default ConsolaSintactica;\n","const getIdentifier = (code) => {\n  if (!code) {\n    return '';\n  }\n  let getCodeCad = [];\n  let Ident = /[a-zA-Z_]\\w*/g;\n  let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n  let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n\n  const regxConst = /const ([a-zA-Z]+)( = )([0-9]+)(;)$/g;\n  const regxLetOrVar = /(var|let) ([a-zA-Z]+)(;|(( = )([0-9]+);))$/g;\n  const regxFunction = /function ([a-zA-Z]+)((\\(\\))|(\\([a-zA-Z]+\\))) {$/g;\n  const regxIf = /if\\(.+\\) {$/g;\n  const regxElse = /} else {$/g;\n  const regxConsole = /console.log\\( .+ \\);$/g;\n  const regxWhile = /while \\(.+\\) {$/g;\n\n  let identificador = '';\n  let numero = '';\n  const getCode = code.match(/[^\\r\\n]+/g);\n  let textErrors = '';\n\n  // Separar en token cada linea de codigo\n  for (let codeI = 0; codeI < getCode.length; codeI++) {\n    let getValueText = getCode[codeI];\n    let tempArray = [];\n\n    for (let codeF = 0; codeF < getValueText.length; codeF++) {\n      let getChar = getValueText.charAt(codeF);\n\n      if (getChar.match(Ident)) {\n        identificador = identificador + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Ident)) {\n          tempArray = [...tempArray, identificador];\n          identificador = '';\n        }\n      } else if (getChar.match(Oper1)) {\n        tempArray = [...tempArray, getChar];\n      } else if (getChar.match(Nums)) {\n        numero = numero + getChar;\n\n        if (!getValueText.charAt(codeF + 1).match(Nums)) {\n          tempArray = [...tempArray, numero];\n          numero = '';\n        }\n      }\n    }\n    getCodeCad = [...getCodeCad, tempArray];\n  }\n\n  let llavesD = 0;\n  let llavesI = 0;\n\n  for (let i = 0; i < getCodeCad.length; i++) {\n    const cont = i + 1;\n    // Si son variables\n    if (getCodeCad[i].includes('const')) {\n      if (!getCode[i].match(regxConst)) {\n        textErrors += `Error linea ${cont}, solucion: const ${\n          getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n        } = ${getCodeCad[i][3]?.match(Nums) ? getCodeCad[i][3] : 0};\\n`;\n      }\n    }\n    if (getCodeCad[i].includes('let') || getCodeCad[i].includes('var')) {\n      if (!getCode[i].match(regxLetOrVar)) {\n        if (getCodeCad[i].length === 3) {\n          textErrors += `Error linea ${cont}, solucion: ${getCodeCad[i][0]} ${\n            getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n          };\\n`;\n        } else {\n          textErrors += `Error linea ${cont}, solucion: ${getCodeCad[i][0]} ${\n            getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n          } = ${getCodeCad[i][3]?.match(Nums) ? getCodeCad[i][3] : 0};\\n`;\n        }\n      }\n    }\n\n    // Si es una function\n    if (getCodeCad[i].includes('function')) {\n      if (!getCode[i].match(regxFunction)) {\n        textErrors += `Error linea ${cont}, solucion: function ${\n          getCodeCad[i][1] ? getCodeCad[i][1] : 'name'\n        } (${getCodeCad[i][3]?.match(Ident) ? getCodeCad[i][3] : 'param'}) {\\n`;\n      }\n    }\n\n    //Si es in if\n    if (getCodeCad[i].includes('if')) {\n      if (!getCode[i].match(regxIf)) {\n        textErrors += `Error linea ${cont}, solucion: if (true) {\\n`;\n      }\n    }\n\n    //Si es in else\n    if (getCodeCad[i].includes('else')) {\n      if (!getCode[i].match(regxElse)) {\n        textErrors += `Error linea ${cont}, solucion: else {\\n`;\n      }\n    }\n\n    // Si es un console.log\n    if (getCodeCad[i].includes('console')) {\n      console.log(getCodeCad[i],getCode[i] )\n      if (!getCode[i].match(regxConsole)) {\n        textErrors += `Error linea ${cont}, solucion: console.log(value);\\n`;\n      }\n    }\n\n    // Si es un while\n    if (getCodeCad[i].includes('while')) {\n      if (!getCode[i].match(regxWhile)) {\n        textErrors += `Error linea ${cont}, solucion: while (true) {\\n`;\n      }\n    }\n\n    //Cantidad de llaves\n    if (getCodeCad[i].includes('{')) {\n      llavesI += 1;\n    }\n    if (getCodeCad[i].includes('}')) {\n      llavesD += 1;\n    }\n  }\n\n  if (llavesI > llavesD) {\n    textErrors += `Error, faltan ${llavesI - llavesD}  '}'  de cierre.\\n`;\n  } else if (llavesD > llavesI) {\n    textErrors += `Error, faltan ${llavesD - llavesI}  '{'  de apertura.\\n`;\n  }\n\n  return textErrors;\n};\n\nexport default getIdentifier;\n","const getIdentifierCodigoIntermedio = (code) => {\n     if (!code) {\n       return '';\n     }\n     let getCodeCad = [];\n     let Ident = /[a-zA-Z_]\\w*/g;\n     let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n     let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n   \n     let identificador = '';\n     let numero = '';\n     const getCode = code.match(/[^\\r\\n]+/g);\n     let textErrors = '';\n   \n     const parse = {\n       declare: 'function ',\n       begin: ' {\\n',\n       end: '} ',\n       static: 'const ',\n       ':': ' = ',\n       ',': ';\\n',\n       dynamic: 'let ',\n       si: 'if',\n       sino: 'else',\n       print: '\\nconsole.log(',\n     };\n   \n     // Separar en token cada linea de codigo\n     for (let codeI = 0; codeI < getCode.length; codeI++) {\n       let getValueText = getCode[codeI];\n       let tempArray = [];\n   \n       for (let codeF = 0; codeF < getValueText.length; codeF++) {\n         let getChar = getValueText.charAt(codeF);\n   \n         if (getChar.match(Ident)) {\n           identificador = identificador + getChar;\n   \n           if (!getValueText.charAt(codeF + 1).match(Ident)) {\n             tempArray = [...tempArray, identificador];\n             identificador = '';\n           }\n         } else if (getChar.match(Oper1)) {\n           tempArray = [...tempArray, getChar];\n         } else if (getChar.match(Nums)) {\n           numero = numero + getChar;\n   \n           if (!getValueText.charAt(codeF + 1).match(Nums)) {\n             tempArray = [...tempArray, numero];\n             numero = '';\n           }\n         }\n       }\n       getCodeCad = [...getCodeCad, tempArray];\n     }\n   \n     for (let i = 0; i < getCodeCad.length; i++) {\n       if (getCodeCad[i].includes('print')) {\n         textErrors += `${parse['print']} ${getCodeCad[i]\n           .slice(1, getCodeCad[i].length)\n           .join(' ')} );\\n`;\n       } else {\n         for (let f = 0; f < getCodeCad[i].length; f++) {\n           if (parse.hasOwnProperty(getCodeCad[i][f])) {\n             textErrors += `${parse[getCodeCad[i][f]]}`;\n           } else {\n             textErrors += `${getCodeCad[i][f]}`;\n           }\n         }\n       }\n     }\n   \n     return textErrors;\n   };\n   \n   export default getIdentifierCodigoIntermedio;","const typesLexico = [\n  {\n    name: 'Palabra reservada',\n    values: [\n      'if',\n      'else',\n      'do',\n      'while',\n      'for',\n      'int',\n      'float',\n      'boolean',\n      'char',\n      'String',\n      'function',\n      'class',\n      'var',\n      'let',\n      'const',\n      'return',\n    ],\n  },\n  { name: 'parentesis izquierdo', values: ['('] },\n  { name: 'parentesis derecho', values: [')'] },\n  { name: 'llave izquierda', values: ['{'] },\n  { name: 'llave Derecha', values: ['}'] },\n  { name: 'corchete izquierdo', values: ['['] },\n  { name: 'corchete derecho', values: [']'] },\n  {\n    name: 'operador aritmetico',\n    values: ['+', '-', '*', '/', '^', '++', '--', '+=', '-='],\n  },\n  { name: 'operador logico', values: ['&&', '||', '|', '!'] },\n  {\n    name: 'operador comparador',\n    values: ['<', '>', '<=', '>=', '!=', '==', '='],\n  },\n  { name: 'delimitador de linea', values: [';'] },\n\n  { name: 'Numero', values: [/\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g] },\n];\nconst types = [\n  {\n    name: 'variables',\n    values: [\n      'var',\n      'let',\n      'const',\n    ],\n  },\n  { name: 'function', values: ['function'] },\n  { name: 'if', values: ['if',['else']] },\n  {\n    name: 'operador',\n    values: ['+', '-', '*', '/', '^', '++', '--', '+=', '-='],\n  },\n\n  { name: 'logico', values: ['&&', '||', '|', '!'] },\n  {\n    name: 'comparador',\n    values: ['<', '>', '<=', '>=', '!=', '==', '='],\n  },\n  { name: 'numero', values: [/\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g] },\n];\n\n\nexport { types, typesLexico };\n","import { typesLexico } from \"../utils/const\";\n\nconst getIdentifier = (code) => {\n     let codeCad = [];\n     let objLex = [];\n     let Ident = /[a-zA-Z_]\\w*/g;\n     let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n     let OperM = /(===|!==|[+][+=]|-[-=]|=[=<>]|[<>][=<>]|&&|[|][|])/g;\n     let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n     let identificador = \"\";\n     let numero = \"\";\n\n     for (let i = 0; i < code.length; i++) {\n       let char = code.charAt(i);\n   \n       if (char.match(Ident)) {\n         identificador = identificador + char;\n         if (\n           !code.charAt(i + 1).match(Ident) \n         ) {\n           codeCad = [...codeCad, identificador];\n           identificador = \"\";\n         }\n       } else if (char.match(Oper1)) {\n         codeCad = [...codeCad, char];\n       } else if (char.match(Nums)) {\n         numero = numero + char;\n   \n         if (!code.charAt(i + 1).match(Nums)\n         ) {\n           codeCad = [...codeCad, numero];\n           numero = \"\";\n         }\n       }\n     }\n   \n     let cadNums = [];\n   \n     //unificacion de numeros decimales\n     for (let ss = 0; ss < codeCad.length; ss++) {\n       if (codeCad[ss].match(/\\d+/) || codeCad[ss].match(/\\.{1}/)) {\n         if (codeCad[ss].match(/(\\.){1}/) && codeCad[ss + 1] != null) {\n           if (codeCad[ss + 1].match(/\\d+/) && codeCad[ss - 1].match(/\\d+/) && codeCad[ss - 1]!=null) {\n             cadNums = [...cadNums, codeCad[ss - 1], codeCad[ss], codeCad[ss + 1]];\n             codeCad.splice(ss - 1, 3, cadNums.join(\"\"));\n             cadNums = [];\n           }\n         }\n       }\n     }\n   \n     //unificar los operadores multi simbolos\n   \n     let inc = 0;\n     while (inc < codeCad.length) {\n       if (codeCad[inc].match(Oper1) || codeCad[inc].match(OperM)) {\n         if (\n           (codeCad[inc] + codeCad[inc + 1]).match(OperM) &&\n           codeCad[inc + 1] != null\n         ) {\n           codeCad.splice(inc, 2, codeCad[inc] + codeCad[inc + 1]);\n         }\n       }\n       inc++;\n     }\n   \n\n   \n     objLex = codeCad.map((x) => {\n       let obj = {\n         Nombre: x,\n         Tipo: \"\",\n         Token: 0,\n       };\n       //Palabras reservadas o identificadores\n       if (x.match(Ident)) {\n         let Palabras = typesLexico[0].values;\n         for (let i = 0; i < Palabras.length; i++) {\n           if (x === Palabras[i]) {\n             obj.Tipo = typesLexico[0].name;\n             obj.Token = i + 1;\n           }\n         }\n         if (obj.Tipo === \"\") {\n           obj.Tipo = \"Identificador\";\n           obj.Token = 185;\n         }\n       }\n   \n       if (x.match(Oper1) || x.match(OperM)) {\n         let ParentesisIzq = typesLexico[1].values;\n         let ParentesisDer = typesLexico[2].values;\n         let LlaveIzq = typesLexico[3].values;\n         let LlaveDer = typesLexico[4].values;\n         let corcheteIzq = typesLexico[5].values;\n         let corcheteDer = typesLexico[6].values;\n         let OperadoresAri = typesLexico[7].values;\n         let logicos = typesLexico[8].values;\n         let comparadores = typesLexico[9].values;\n         let delimitador = typesLexico[10].values;\n   \n         //Para operadores aritmeticos\n         for (let i = 0; i < OperadoresAri.length; i++) {\n           if (x === OperadoresAri[i]) {\n             obj.Tipo = typesLexico[7].name;\n             obj.Token = i + 155;\n           }\n         }\n         //Para parentesis izquierdo\n         for (let i = 0; i < ParentesisIzq.length; i++) {\n           if (x === ParentesisIzq[i]) {\n             obj.Tipo = typesLexico[1].name;\n             obj.Token = i + 151;\n           }\n         }\n         //Para parentesis derecho\n         for (let i = 0; i < ParentesisDer.length; i++) {\n           if (x === ParentesisDer[i]) {\n             obj.Tipo = typesLexico[2].name;\n             obj.Token = i + 152;\n           }\n         }\n   \n         //Para llave izquierda\n   \n         for (let i = 0; i < LlaveIzq.length; i++) {\n           if (x === LlaveIzq[i]) {\n             obj.Tipo = typesLexico[3].name;\n             obj.Token = i + 153;\n           }\n         }\n         //Para llave derecha\n         for (let i = 0; i < LlaveDer.length; i++) {\n           if (x === LlaveDer[i]) {\n             obj.Tipo = typesLexico[4].name;\n             obj.Token = i + 154;\n           }\n         }\n         //Para Corchete izquierdo\n         for (let i = 0; i < corcheteIzq.length; i++) {\n           if (x === corcheteIzq[i]) {\n             obj.Tipo = typesLexico[5].name;\n             obj.Token = i + 186;\n           }\n         }\n         //Para corchete derecho\n         for (let i = 0; i < corcheteDer.length; i++) {\n           if (x === corcheteDer[i]) {\n             obj.Tipo = typesLexico[6].name;\n             obj.Token = i + 187;\n           }\n         }\n         //Para Operadores logicos\n         for (let i = 0; i < logicos.length; i++) {\n           if (x === logicos[i]) {\n             obj.Tipo = typesLexico[8].name;\n             obj.Token = i + 166;\n           }\n         }\n         //Para Operadores comparadores\n         for (let i = 0; i < comparadores.length; i++) {\n           if (x === comparadores[i]) {\n             obj.Tipo = typesLexico[9].name;\n             obj.Token = i + 172;\n           }\n         }\n         //Para Delimitador\n         for (let i = 0; i < delimitador.length; i++) {\n           if (x === delimitador[i]) {\n             obj.Tipo = typesLexico[10].name;\n             obj.Token = i + 183;\n           }\n         }\n       }\n       let numero = typesLexico[11].values;\n       if (x.match(Nums)) {\n         //Para Nmeros\n         for (let i = 0; i < numero.length; i++) {\n           if (x.match(numero[i])) {\n             obj.Tipo = typesLexico[11].name;\n             obj.Token = i + 188;\n           }\n         }\n       }\n   \n       return obj;\n     });\n     \n     return objLex;\n   };\n   \n   export default getIdentifier;   \n   ","import React, { useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport getIdentifier from '../helpers/getIdentifier';\nimport getIdentifierCodigoIntermedio from '../helpers/getIdentifierCodigoIntermedio';\nimport getIdentifierLexico from '../helpers/getIdentifierLexico';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: '100%',\n  },\n}));\n\nconst Form = ({ setData, setDataConvert, setDataConvertLexico }) => {\n  const classes = useStyles();\n  const [codigo, setCodigo] = useState('');\n\n  const getResult = () => {\n    const convertCode = getIdentifierCodigoIntermedio(codigo);\n    setData(convertCode);\n    setDataConvert(getIdentifier(convertCode));\n    setDataConvertLexico(getIdentifierLexico(convertCode));\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h1 style={{ textTransform: 'uppercase' }}>Compilador</h1>\n          <div className={classes.container}>\n            <span className={classes.title}>Autores:</span>\n            <span className={classes.text}>\n              Jose Enmanuel Estrella 2-16-0823  y  \n            </span>\n            <span className={classes.text}>Robert Alvarez 2-16-0738</span>\n          </div>\n          <div className={classes.container}>\n            <span className={classes.title}>Lenguaje:</span>\n            <span className={classes.text}>JavaScript</span>\n          </div>\n        </div>\n      </Box>\n      <div style={{ margin: 50 }}>\n        <div>\n          <TextField\n            id=\"outlined-multiline-static\"\n            className={classes.inputText}\n            label=\"Escribe o pega el código a analizar\"\n            multiline\n            rows={11}\n            defaultValue={codigo}\n            onChange={({ target: { value } }) => setCodigo(value)}\n          />\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <Button variant=\"contained\" onClick={getResult}>\n            Analizar\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport { Box, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: '100%',\n    color: 'red',\n  },\n}));\n\nconst ConsolaCodigoIntermedio = ({ codigo }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h4>CONSOLA CODIGO INTERMEDIO</h4>\n        </div>\n      </Box>\n        <div>\n          <div style={{ paddingTop: 17}}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              multiline\n              rows={16}\n              disabled={true}\n              defaultValue={codigo}\n            />\n          </div>\n        </div>\n    </>\n  );\n};\nexport default ConsolaCodigoIntermedio;\n","import React from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material';\n\nconst ConsolaLexica = ({ codigo }) => {\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h4>CONSOLA LÉXICA</h4>\n        </div>\n      </Box>\n      <div>\n        <div style={{ margin: 50 }}>\n          <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\n            <Table\n              sx={{ minWidth: 800 }}\n              size=\"small\"\n              aria-label=\"a dense table\"\n            >\n              <TableHead style={{ backgroundColor: '##AFAEAE' }}>\n                <TableRow>\n                  <TableCell>Lexema</TableCell>\n                  <TableCell align=\"left\">Token</TableCell>\n                  <TableCell align=\"left\">Código</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {codigo.length\n                  ? codigo.map(({ Nombre, Tipo, Token }, i) => (\n                      <TableRow\n                        key={i}\n                        sx={{\n                          '&:last-child td, &:last-child th': { border: 0 },\n                        }}\n                      >\n                        <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                          {Nombre}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                          {Tipo}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                          {Token}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  : null}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ConsolaLexica;\n","import React from 'react';\nimport { Box, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: '100%',\n    color: 'red',\n  },\n}));\n\nconst ConsolaSemantica = ({ codigo }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h4>CONSOLA SEMANTICA</h4>\n        </div>\n      </Box>\n        <div>\n          <div style={{ paddingTop: 17}}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              multiline\n              rows={16}\n              disabled={true}\n              defaultValue={codigo}\n            />\n          </div>\n        </div>\n    </>\n  );\n};\n\nexport default ConsolaSemantica;\n","const getIdentifierSemantico = (code) => {\n     if (!code) {\n       return '';\n     }\n     let getCodeCad = [];\n     let Ident = /[a-zA-Z_]\\w*/g;\n     let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n     let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n   \n     const regxIsOpe =\n       /^[a-zA-Z]+ = ([a-zA-Z]+|[0-9]+) (-|\\+|\\/|\\*) ([a-zA-Z]+|[0-9]+)/g;\n   \n     const regxInt = /[0-9]+/g;\n     const regxBool = /(true|false)/g;\n     const regxString = /[a-zA-Z]+/g;\n   \n     let identificador = '';\n     let numero = '';\n     const getCode = code.match(/[^\\r\\n]+/g);\n     let textErrors = '';\n   \n     const variables = {\n       int: {},\n       string: {},\n       bool: {},\n     };\n   \n     // Separar en token cada linea de codigo\n     for (let codeI = 0; codeI < getCode.length; codeI++) {\n       let getValueText = getCode[codeI];\n       let tempArray = [];\n   \n       for (let codeF = 0; codeF < getValueText.length; codeF++) {\n         let getChar = getValueText.charAt(codeF);\n   \n         if (getChar.match(Ident)) {\n           identificador = identificador + getChar;\n   \n           if (!getValueText.charAt(codeF + 1).match(Ident)) {\n             tempArray = [...tempArray, identificador];\n             identificador = '';\n           }\n         } else if (getChar.match(Oper1)) {\n           tempArray = [...tempArray, getChar];\n         } else if (getChar.match(Nums)) {\n           numero = numero + getChar;\n   \n           if (!getValueText.charAt(codeF + 1).match(Nums)) {\n             tempArray = [...tempArray, numero];\n             numero = '';\n           }\n         }\n       }\n       getCodeCad = [...getCodeCad, tempArray];\n     }\n   \n     for (let i = 0; i < getCodeCad.length; i++) {\n       const cont = i + 1;\n       if (\n         getCodeCad[i].includes('const') ||\n         getCodeCad[i].includes('let') ||\n         getCodeCad[i].includes('var')\n       ) {\n         if (getCodeCad[i].length === 5) {\n           if (getCodeCad[i][3].match(regxInt)) {\n             variables['int'] = {\n               ...variables['int'],\n               [getCodeCad[i][1]]: getCodeCad[i][3],\n             };\n           }\n           if (\n             getCodeCad[i][3].match(regxString) &&\n             getCodeCad[i][3] !== 'true' &&\n             getCodeCad[i][3] !== 'false'\n           ) {\n             variables['string'] = {\n               ...variables['string'],\n               [getCodeCad[i][1]]: getCodeCad[i][3],\n             };\n           }\n           if (getCodeCad[i][3].match(regxBool)) {\n             variables['bool'] = {\n               ...variables['bool'],\n               [getCodeCad[i][1]]: getCodeCad[i][3],\n             };\n           }\n         }\n       }\n       if (getCode[i].match(regxIsOpe)) {\n         let operacionName = '';\n         switch (getCodeCad[i][3]) {\n           case '+':\n             operacionName = 'sumar';\n             break;\n           case '-':\n             operacionName = 'restar';\n             break;\n           case '*':\n             operacionName = 'multiplicar';\n             break;\n           case '/':\n             operacionName = 'dividir';\n             break;\n           default:\n             operacionName = '';\n         }\n   \n         // OPERACIONES\n   \n         if (['+', '-', '*', '/'].includes(getCodeCad[i][3])) {\n           if (\n             getCodeCad[i][2].match(regxInt) &&\n             getCodeCad[i][4].match(regxInt)\n           ) {\n           } else if (getCodeCad[i][2].match(regxInt)) {\n             if (!variables['int'].hasOwnProperty([getCodeCad[i][4]])) {\n               if (!verificarVariable(getCodeCad[i][4], variables)) {\n                 textErrors += `Error linea ${cont}, La variable ${getCodeCad[i][4]} no esta declarada.\\n`;\n               }\n               textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n             }\n           } else if (getCodeCad[i][4].match(regxInt)) {\n             if (!variables['int'].hasOwnProperty([getCodeCad[i][2]])) {\n               if (!verificarVariable(getCodeCad[i][2], variables)) {\n                 textErrors += `Error linea ${cont}, La variable ${getCodeCad[i][2]} no esta declarada.\\n`;\n               }\n               textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n             }\n           } else {\n             if (\n               verificarVariable(getCodeCad[i][2], variables) &&\n               verificarVariable(getCodeCad[i][4], variables)\n             ) {\n               if (\n                 variables['string'].hasOwnProperty([getCodeCad[i][2]]) &&\n                 variables['string'].hasOwnProperty([getCodeCad[i][4]]) &&\n                 getCodeCad[i][3] !== '+'\n               ) {\n                 textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\", ambos son String.\\n`;\n               } else if (\n                 !variables['int'].hasOwnProperty([getCodeCad[i][2]]) ||\n                 !variables['int'].hasOwnProperty([getCodeCad[i][4]])\n               ) {\n                 textErrors += `Error linea ${cont}, No puede ${operacionName} \"${getCodeCad[i][2]}\" con \"${getCodeCad[i][4]}\"\\n`;\n               }\n             }\n   \n             if (!verificarVariable(getCodeCad[i][2], variables)) {\n               textErrors += `Error linea ${cont}, La variable \"${getCodeCad[i][4]}\" no esta declarada.\\n`;\n             }\n             if (!verificarVariable(getCodeCad[i][4], variables)) {\n               textErrors += `Error linea ${cont}, La variable \"${getCodeCad[i][4]}\" no esta declarada.\\n`;\n             }\n           }\n         }\n       }\n     }\n   \n     return textErrors;\n   };\n   \n   const verificarVariable = (name, variables) => {\n     let isCorrect = false;\n   \n     Object.keys(variables).forEach((value) => {\n       if (variables[value][name]) {\n         isCorrect = true;\n       }\n     });\n   \n     return isCorrect;\n   };\n   \n   export default getIdentifierSemantico;","import React, { useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport getIdentifierSemantico from '../helpers/getIdentifierSemantico';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: '100%',\n  },\n}));\n\nconst FormSemantico = ({ setDataConvertSemantica }) => {\n  const classes = useStyles();\n  const [codigo, setCodigo] = useState('');\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h3 style={{ textTransform: 'uppercase' }}>analizador semantico</h3>\n        </div>\n      </Box>\n      <div style={{ margin: 50 }}>\n        <div>\n          <TextField\n            id=\"outlined-multiline-static\"\n            className={classes.inputText}\n            label=\"Escribe o pega el código a analizar\"\n            multiline\n            rows={11}\n            defaultValue={codigo}\n            onChange={({ target: { value } }) => setCodigo(value)}\n          />\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              setDataConvertSemantica(getIdentifierSemantico(codigo))\n            }\n          >\n            Analizar\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FormSemantico;\n","import React, { useState } from 'react';\nimport { Box, Grid } from '@mui/material';\nimport ConsolaSintactica from '../components/ConsolaSintactica';\nimport Form from '../components/Form';\nimport ConsolaCodigoIntermedio from '../components/ConsolaCodigoIntermedio';\nimport ConsolaLexica from '../components/ConsolaLexica';\nimport ConsolaSemantica from '../components/ConsolaSemantica';\nimport FormSemantico from '../components/FormSemantico';\n\nconst AnalizadorSintactico = () => {\n  const [data, setData] = useState('');\n  const [dataConvert, setDataConvert] = useState('');\n  const [dataConvertLexico, setDataConvertLexico] = useState('');\n  const [dataConvertSemantica, setDataConvertSemantica] = useState('');\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 1 }} style={{ margin: 20, paddingBottom: 30 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <Form\n              setData={setData}\n              setDataConvert={setDataConvert}\n              setDataConvertLexico={setDataConvertLexico}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <ConsolaCodigoIntermedio codigo={data} />\n          </Grid>\n          <Grid item xs={8}>\n            <ConsolaLexica codigo={dataConvertLexico} />\n          </Grid>\n          <Grid item xs={4}>\n            <ConsolaSintactica codigo={dataConvert} />\n          </Grid>\n          <Grid item xs={8}>\n            <FormSemantico setDataConvertSemantica={setDataConvertSemantica} />\n          </Grid>\n          <Grid item xs={4}>\n            <ConsolaSemantica codigo={dataConvertSemantica} />\n          </Grid>\n        </Grid>\n      </Box>\n      {console.log(data)}\n    </>\n  );\n};\n\nexport default AnalizadorSintactico;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AnalizadorSintactico from './pages';\n\nReactDOM.render(\n    <AnalizadorSintactico />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}